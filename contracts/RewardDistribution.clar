(define-constant ERR-NOT-AUTHORIZED u100)
(define-constant ERR-INVALID-AMOUNT u101)
(define-constant ERR-INVALID-REVIEW-ID u102)
(define-constant ERR-INSUFFICIENT-STAKE u103)
(define-constant ERR-VOTING-NOT-FINALIZED u104)
(define-constant ERR-ALREADY-CLAIMED u105)
(define-constant ERR-NO-PENDING-REWARD u106)
(define-constant ERR-INVALID-QUALITY-SCORE u107)
(define-constant ERR-INVALID-REVIEWER u108)
(define-constant ERR-SLASH-THRESHOLD-NOT-MET u109)
(define-constant ERR-BATCH-LIMIT-EXCEEDED u110)
(define-constant ERR-INVALID-TOKEN-CONTRACT u111)
(define-constant ERR-INVALID-VOTING-CONTRACT u112)
(define-constant ERR-INVALID-SUBMISSION-CONTRACT u113)
(define-constant ERR-REVIEW-NOT-FOUND u114)
(define-constant ERR-REVIEWER-ALREADY-STAKED u115)
(define-constant ERR-REVIEWER-NOT-STAKED u116)
(define-constant ERR-INVALID-PENALTY-RATE u117)
(define-constant ERR-INVALID-REWARD-MULTIPLIER u118)
(define-constant ERR-INVALID-MIN-STAKE u119)
(define-constant ERR-INVALID-MAX-STAKE u120)
(define-constant ERR-GOVERNANCE-NOT-SET u121)
(define-constant ERR-INVALID-BATCH-SIZE u122)
(define-constant ERR-INVALID-TIMESTAMP u123)
(define-constant ERR-TRANSFER-FAILED u124)

(define-data-var token-contract principal tx-sender)
(define-data-var voting-contract principal tx-sender)
(define-data-var submission-contract principal tx-sender)
(define-data-var governance-contract (optional principal) none)
(define-data-var min-stake-amount uint u1000)
(define-data-var max-stake-amount uint u1000000)
(define-data-var penalty-rate uint u20)
(define-data-var reward-multiplier uint u2)
(define-data-var slash-threshold uint u50)
(define-data-var batch-limit uint u50)
(define-data-var total-staked uint u0)
(define-data-var total-rewards-distributed uint u0)

(define-map reviewer-stakes principal uint)
(define-map pending-rewards principal uint)
(define-map claimed-reviews principal (list 100 uint))
(define-map review-quality-scores uint uint)
(define-map review-reviewers uint principal)
(define-map slashed-reviewers principal bool)

(define-trait token-trait
  (
    (transfer (uint principal principal (optional (buff 34))) (response bool uint))
    (mint (uint principal) (response bool uint))
    (burn (uint principal) (response bool uint))
    (get-balance (principal) (response uint uint))
  )
)

(define-trait voting-trait
  (
    (get-quality-score (uint) (response uint uint))
    (is-voting-finalized (uint) (response bool uint))
  )
)

(define-trait submission-trait
  (
    (get-reviewer (uint) (response principal uint))
    (is-review-complete (uint) (response bool uint))
  )
)

(define-read-only (get-stake (reviewer principal))
  (default-to u0 (map-get? reviewer-stakes reviewer))
)

(define-read-only (get-pending-reward (reviewer principal))
  (default-to u0 (map-get? pending-rewards reviewer))
)

(define-read-only (get-review-quality-score (review-id uint))
  (default-to u0 (map-get? review-quality-scores review-id))
)

(define-read-only (get-total-staked)
  (var-get total-staked)
)

(define-read-only (get-total-rewards-distributed)
  (var-get total-rewards-distributed)
)

(define-read-only (is-slashed (reviewer principal))
  (default-to false (map-get? slashed-reviewers reviewer))
)

(define-private (validate-amount (amount uint))
  (if (and (> amount u0) (<= amount (var-get max-stake-amount)))
    (ok true)
    (err ERR-INVALID-AMOUNT))
)

(define-private (validate-review-id (review-id uint))
  (if (> review-id u0)
    (ok true)
    (err ERR-INVALID-REVIEW-ID))
)

(define-private (validate-reviewer (reviewer principal))
  (if (not (is-eq reviewer tx-sender))
    (ok true)
    (err ERR-INVALID-REVIEWER))
)

(define-private (validate-quality-score (score uint))
  (if (and (>= score u0) (<= score u100))
    (ok true)
    (err ERR-INVALID-QUALITY-SCORE))
)

(define-private (validate-min-stake (amount uint))
  (if (>= amount (var-get min-stake-amount))
    (ok true)
    (err ERR-INSUFFICIENT-STAKE))
)

(define-private (validate-penalty-rate (rate uint))
  (if (<= rate u100)
    (ok true)
    (err ERR-INVALID-PENALTY-RATE))
)

(define-private (validate-reward-multiplier (multiplier uint))
  (if (> multiplier u0)
    (ok true)
    (err ERR-INVALID-REWARD-MULTIPLIER))
)

(define-private (validate-batch-size (size uint))
  (if (<= size (var-get batch-limit))
    (ok true)
    (err ERR-INVALID-BATCH-SIZE))
)

(define-private (validate-timestamp (ts uint))
  (if (>= ts block-height)
    (ok true)
    (err ERR-INVALID-TIMESTAMP))
)

(define-public (set-token-contract (new-contract principal))
  (begin
    (asserts! (is-eq tx-sender contract-caller) (err ERR-NOT-AUTHORIZED))
    (var-set token-contract new-contract)
    (ok true)
  )
)

(define-public (set-voting-contract (new-contract principal))
  (begin
    (asserts! (is-eq tx-sender contract-caller) (err ERR-NOT-AUTHORIZED))
    (var-set voting-contract new-contract)
    (ok true)
  )
)

(define-public (set-submission-contract (new-contract principal))
  (begin
    (asserts! (is-eq tx-sender contract-caller) (err ERR-NOT-AUTHORIZED))
    (var-set submission-contract new-contract)
    (ok true)
  )
)

(define-public (set-governance-contract (new-contract principal))
  (begin
    (asserts! (is-eq tx-sender contract-caller) (err ERR-NOT-AUTHORIZED))
    (var-set governance-contract (some new-contract))
    (ok true)
  )
)

(define-public (set-min-stake-amount (new-amount uint))
  (begin
    (asserts! (is-some (var-get governance-contract)) (err ERR-GOVERNANCE-NOT-SET))
    (try! (validate-amount new-amount))
    (var-set min-stake-amount new-amount)
    (ok true)
  )
)

(define-public (set-penalty-rate (new-rate uint))
  (begin
    (asserts! (is-some (var-get governance-contract)) (err ERR-GOVERNANCE-NOT-SET))
    (try! (validate-penalty-rate new-rate))
    (var-set penalty-rate new-rate)
    (ok true)
  )
)

(define-public (set-reward-multiplier (new-multiplier uint))
  (begin
    (asserts! (is-some (var-get governance-contract)) (err ERR-GOVERNANCE-NOT-SET))
    (try! (validate-reward-multiplier new-multiplier))
    (var-set reward-multiplier new-multiplier)
    (ok true)
  )
)

(define-public (set-slash-threshold (new-threshold uint))
  (begin
    (asserts! (is-some (var-get governance-contract)) (err ERR-GOVERNANCE-NOT-SET))
    (try! (validate-quality-score new-threshold))
    (var-set slash-threshold new-threshold)
    (ok true)
  )
)

(define-public (stake-reviewer (amount uint))
  (let ((current-stake (get-stake tx-sender)))
    (try! (validate-amount amount))
    (try! (validate-min-stake amount))
    (asserts! (is-eq current-stake u0) (err ERR-REVIEWER-ALREADY-STAKED))
    (try! (as-contract (contract-call? .token-trait transfer amount tx-sender (as-contract tx-sender) none)))
    (map-set reviewer-stakes tx-sender amount)
    (var-set total-staked (+ (var-get total-staked) amount))
    (print { event: "staked", reviewer: tx-sender, amount: amount })
    (ok amount)
  )
)

(define-public (unstake-reviewer)
  (let ((stake (get-stake tx-sender)))
    (asserts! (> stake u0) (err ERR-REVIEWER-NOT-STAKED))
    (asserts! (not (is-slashed tx-sender)) (err ERR-NOT-AUTHORIZED))
    (try! (as-contract (contract-call? .token-trait transfer stake (as-contract tx-sender) tx-sender none)))
    (map-delete reviewer-stakes tx-sender)
    (var-set total-staked (- (var-get total-staked) stake))
    (print { event: "unstaked", reviewer: tx-sender, stake: stake })
    (ok stake)
  )
)

(define-public (claim-reward (review-id uint))
  (let (
    (reviewer (unwrap! (contract-call? .submission-trait get-reviewer review-id) (err ERR-REVIEW-NOT-FOUND)))
    (score (unwrap! (contract-call? .voting-trait get-quality-score review-id) (err ERR-INVALID-QUALITY-SCORE)))
    (base-reward (* score (var-get reward-multiplier)))
    (current-pending (get-pending-reward reviewer))
  )
    (try! (validate-review-id review-id))
    (asserts! (is-eq reviewer tx-sender) (err ERR-NOT-AUTHORIZED))
    (asserts! (unwrap! (contract-call? .voting-trait is-voting-finalized review-id) (err ERR-VOTING-NOT-FINALIZED)))
    (asserts! (not (is-some (index-of? (default-to (list) (map-get? claimed-reviews reviewer)) review-id))) (err ERR-ALREADY-CLAIMED))
    (if (< score (var-get slash-threshold))
      (try! (slash-stake-internal reviewer review-id score))
      (begin
        (try! (as-contract (contract-call? .token-trait mint base-reward reviewer)))
        (map-set pending-rewards reviewer (+ current-pending base-reward))
        (var-set total-rewards-distributed (+ (var-get total-rewards-distributed) base-reward))
      )
    )
    (map-set claimed-reviews reviewer (unwrap-panic (as-max-len? (append (default-to (list) (map-get? claimed-reviews reviewer)) review-id) u100)))
    (print { event: "reward-claimed", review-id: review-id, reviewer: reviewer, amount: base-reward })
    (ok base-reward)
  )
)

(define-private (slash-stake-internal (reviewer principal) (review-id uint) (score uint))
  (let ((stake (get-stake reviewer)) (penalty (* stake (/ (var-get penalty-rate) u100))))
    (asserts! (> stake u0) (err ERR-REVIEWER-NOT-STAKED))
    (try! (as-contract (contract-call? .token-trait burn penalty (as-contract tx-sender))))
    (map-set reviewer-stakes reviewer (- stake penalty))
    (map-set slashed-reviewers reviewer true)
    (var-set total-staked (- (var-get total-staked) penalty))
    (print { event: "stake-slashed", reviewer: reviewer, review-id: review-id, penalty: penalty })
    (ok true)
  )
)

(define-public (distribute-batch (review-ids (list 50 uint)))
  (let ((size (len review-ids)))
    (try! (validate-batch-size size))
    (fold distribute-single review-ids (ok u0))
  )
)

(define-private (distribute-single (review-id uint) (acc (response uint uint)))
  (let ((res (claim-reward review-id)))
    (match res value (ok (+ (unwrap! acc (err ERR-TRANSFER-FAILED)) value)) err acc)
  )
)